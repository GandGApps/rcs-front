using System;
using System.Collections.Generic;
using System.Text;

namespace Kassa.Shared.ServiceLocator.Analyzer;
public static class RcsLocatorBuilderGeneratorStrings
{
    public const string RcsLocatorBuilderClassName = "RcsLocatorBuilder";
    public const string RcsLocatorBuilderNamespace = "Kassa.Shared.ServiceLocator";
    public const string RcsLocatorBuilderFullName = $"{RcsLocatorBuilderNamespace}.{RcsLocatorBuilderClassName}";
    public const string RcsLocatorCurrentLocator = $"RcsLocator";
    public const string RcsLocatorGetRequiredService = $"GetRequiredService";
    public const string AddTransientMethodName = "AddTransient";
    public const string AddScopedMethodName = "AddScoped";
    public const string AddSingletonMethodName = "AddSingleton";

    public const string RcsLocatorBuilderClassDecloration = @$"
// <auto-generated/>

namespace {RcsLocatorBuilderNamespace}
{{
    internal static partial class {RcsLocatorBuilderClassName}
    {{
        public static void AddTransient<TService, TImplementation>() where TService : class where TImplementation : TService
        {{
            // This method is needed by the source generator
            // The body of this method is empty because this method is only a marker
        }}

        public static void AddScoped<TService, TImplementation>() where TService : class, IInitializable where TImplementation : TService
        {{
            // This method is needed by the source generator
            // The body of this method is empty because this method is only a marker
        }}

        public static void AddSingleton<TService, TImplementation>() where TService : class where TImplementation : TService
        {{
            // This method is needed by the source generator
            // The body of this method is empty because this method is only a marker
        }}

        public static void AddTransient<TService>()
        {{
            // This method is needed by the source generator
            // The body of this method is empty because this method is only a marker
        }}

        public static void AddScoped<TService>() where TService : class, IInitializable
        {{
            // This method is needed by the source generator
            // The body of this method is empty because this method is only a marker
        }}

        public static void AddSingleton<TService>()
        {{
            // This method is needed by the source generator
            // The body of this method is empty because this method is only a marker
        }}

        public static void AddService<TService>(Func<TService> serviceCreator) where TService : class 
        {{
            ServiceLocatorBuilder.AddService<TService>(() => serviceCreator());
        }}

        public static void AddSingleton<TService>(Func<TService> serviceCreator) where TService : class 
        {{
            TService service = null!;
            ServiceLocatorBuilder.AddService<TService>(() => service ??= serviceCreator());
        }}

        public static void AddSingleton<TService>(TService service) where TService : class
        {{
            ServiceLocatorBuilder.AddService<TService>(() => service);
        }}

    }}
}}
";

    public const string InjectConstructorAttributeShortName = "InjectConstructor";
    public const string InjectConstructorAttributeName = $"{InjectConstructorAttributeShortName}Attribute";
    public const string InjectConstructorAttributeFullName = $"{RcsLocatorBuilderNamespace}.{InjectConstructorAttributeName}";

    public const string InjectConstructorAttributeDecloration = @$"
// <auto-generated/>

namespace {RcsLocatorBuilderNamespace}
{{
    [AttributeUsage(AttributeTargets.Constructor, AllowMultiple = false, Inherited = false)]
    internal sealed class {InjectConstructorAttributeName} : Attribute
    {{
    }}
}}
";

    public const string ScopeInjectAttributeShortName = "ScopeInject";
    public const string ScopeInjectAttributeName = $"{ScopeInjectAttributeShortName}Attribute";
    public const string ScopeInjectAttributeFullName = $"{RcsLocatorBuilderNamespace}.{ScopeInjectAttributeName}";

    public const string ScopeInjectAttributeDecloration = @$"

// <auto-generated/>
namespace {RcsLocatorBuilderNamespace}
{{
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = false)]
    internal sealed class {ScopeInjectAttributeName} : Attribute
    {{
    }}
}}
";

    public const string ServiceLocatorBuilderName = "ServiceLocatorBuilder";
    public const string ServiceLocatorBuilderAddScopedServiceMethodName = "AddScopedService";
    public const string rviceLocatorBuilderAddServiceMethodName = "AddService";
}